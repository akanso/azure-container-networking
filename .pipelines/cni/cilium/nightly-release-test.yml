pr: none
trigger: none

stages:
  - stage: setup
    displayName: Setup
    jobs:
      - job: env
        displayName: Setup
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:
          - script: |
              echo "##vso[task.setvariable variable=commitID;isOutput=true]$(echo $(make revision)-$(date "+%d%H%M"))"
            name: "EnvironmentalVariables"
            displayName: "Set environmental variables"
            condition: always()

  - stage: init
    displayName: "Build and Push Cilium Image"
    jobs:
      - job: build_and_push_cilium_image
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
        strategy:
          matrix:
            cilium_agent:
              type: docker-cilium-image
              image: cilium
              directory: cilium
            cilium_operator_generic:
              type: docker-operator-generic-image
              image: operator-generic
              directory: operator
        steps:
          - bash: |
              set -ex
              cd .pipelines/
              git clone https://github.com/cilium/cilium.git
              cd cilium
              if [ ! -z $CILIUM_COMMIT_ID ]; then
                git reset --hard $CILIUM_COMMIT_ID
              fi

              # Override current images used within dockerfiles
              goImage=`cat ./images/$(directory)/Dockerfile | grep "ARG GOLANG_IMAGE" | awk '{print $2}'`
              alpineImage=`cat ./images/$(directory)/Dockerfile | grep "ARG ALPINE_IMAGE" | awk '{print $2}'`

              if ! [ -z $goImage ]; then
                goTag=${goImage#*:}
                goVersion=${goTag%@*}
                goMCR=mcr.microsoft.com/oss/go/microsoft/golang:${goVersion}
                echo "Golang MCR image: ${goMCR}"
                GO_ARGS="--build-arg GOLANG_IMAGE=${goMCR} "
              fi

              if ! [ -z $alpineImage ]; then
                alpineTag=${alpineImage#*:}
                alpineVersion=${alpineTag%@*}
                # Alpine images are no longer updated on MCR, use ACR Cache mirror
                alpineACR=acnpublic.azurecr.io/alpine:${alpineVersion}
                echo "alpine MCR image: ${alpineACR}"
                ALPINE_ARGS="--build-arg ALPINE_IMAGE=${alpineACR} "
              fi
              BUILD_ARGS=${GO_ARGS}${ALPINE_ARGS}

              DOCKER_FLAGS="$BUILD_ARGS" \
              make $(type)
            name: BuildCiliumImage
            displayName: "Build Cilium Image"
          - task: AzureCLI@2
            displayName: "Login"
            inputs:
              azureSubscription: $(ACR_ARM_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              inlineScript: |
                az acr login -n $(ACR)
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(TEST_SUB_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              inlineScript: |
                set -ex
                docker tag quay.io/cilium/$(image):$(DOCKER_IMAGE_TAG) $(ACR).azurecr.io/cilium/$(image):$(DOCKER_IMAGE_TAG)
                docker push $(ACR).azurecr.io/cilium/$(image):$(DOCKER_IMAGE_TAG)
            name: "PushCiliumImage"
            displayName: "Push Cilium Image"
          - task: AzureCLI@2
            displayName: "Logout"
            inputs:
              azureSubscription: $(ACR_ARM_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              inlineScript: |
                docker logout

  - stage: cilium_nightly
    displayName: E2E - Cilium Nightly
    dependsOn:
      - init
      - setup
    variables:
      GOPATH: "$(Agent.TempDirectory)/go" # Go workspace path
      GOBIN: "$(GOPATH)/bin" # Go binaries path
      modulePath: "$(GOPATH)/src/github.com/Azure/azure-container-networking"
      commitID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.commitID'] ]
    jobs:
      - template: ../../templates/create-cluster.yaml
        parameters:
          name: cilium_overlay_nightly
          displayName: Cilium on AKS Overlay
          clusterType: overlay-byocni-nokubeproxy-up
          clusterName: ciliumnightly-$(commitID)
          vmSize: Standard_B2ms
          k8sVersion: ""
          dependsOn: ""
          region: $(LOCATION)
      - job: cilium_nightly
        displayName: Cilium Overlay Nightly E2E
        dependsOn:
          - cilium_overlay_nightly
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
        steps:
          - template: ../../singletenancy/cilium-overlay/cilium-overlay-e2e-step-template.yaml
            parameters:
              name: "cilium_nightly"
              clusterName: ciliumnightly-$(commitID)
              testHubble: true
              testLRP: true

      - template: ../../cni/k8s-e2e/k8s-e2e-job-template.yaml
        parameters:
          sub: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
          clusterName: ciliumnightly-$(commitID)
          os: linux
          cni: cilium
          dependsOn: cilium_nightly
          datapath: true
          dns: true
          portforward: true
          service: true

      - job: logs
        displayName: "Nightly Logs"
        dependsOn:
          - cilium_nightly
          - cni_linux
        condition: always()
        steps:
          - template: ../../templates/cilium-cli.yaml

          - script: |
              set -e
              echo "Run Cilium Connectivity Tests"
              cilium status
              cilium connectivity test --test check-log-errors --log-check-levels error
            name: "ciliumConnectivityTests"
            displayName: "Run Cilium Connectivity Tests"
            condition: always()

          - template: ../../templates/log-check-template.yaml # Operator Check
            parameters:
              clusterName: $(clusterName)-$(commitID)
              podLabel: "name=cilium-operator"
              logGrep: "level=error"

          - template: ../../templates/log-template.yaml
            parameters:
              clusterName: ciliumnightly-$(commitID)
              os: linux
              cni: cilium

  - stage: delete
    displayName: Delete Clusters
    condition: always()
    dependsOn:
      - setup
      - cilium_nightly
    variables:
      commitID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.commitID'] ]
    jobs:
      - job: delete
        displayName: Delete Cluster
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        strategy:
          matrix:
            cilium_nightly:
              name: cilium_overlay_nightly
              clusterName: ciliumnightly
        steps:
          - template: ../../templates/k8s-yaml-test.yaml
            parameters:
              clusterName: $(clusterName)-$(commitID)

          - template: ../../templates/delete-cluster.yaml
            parameters:
              name: $(name)
              clusterName: $(clusterName)-$(commitID)
              region: $(LOCATION)
              svcConn: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
